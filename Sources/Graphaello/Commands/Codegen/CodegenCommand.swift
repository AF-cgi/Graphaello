//
//  CodegenCommand.swift
//  GraphQLCLI
//
//  Created by Mathias Quintero on 11/29/19.
//  Copyright ¬© 2019 Mathias Quintero. All rights reserved.
//

import Foundation
import CLIKit
import XcodeProj
import PathKit

class CodegenCommand : Command {
    let pipeline = PipelineFactory.create()
    
    @CommandOption(default: .first(Path.currentDirectory),
                   description: "Path to Xcode Project usind GraphQL")
    var project: ProjectPath
    
    @CommandOption(default: .binary, description: "Reference to path of the Apollo CLI")
    var apollo: ApolloReference

    var description: String {
        return "Generates a file with all the boilerplate code for your GraphQL Code"
    }

    func run() throws {
        let project = Console.perform(title: "üß™ Starting Codegen") { try self.project.open() }
        let extracted = Console.perform(title: "‚òïÔ∏è Extracting Structs") { try pipeline.extract(from: project) }
        let parsed = Console.perform(title: "üìö Parsing Paths From Structs") { try pipeline.parse(extracted: extracted) }
        let validated = Console.perform(title: "üîé Validating") { try pipeline.validate(parsed: parsed) }
        let resolved = Console.perform(title: "üß∞ Resolving Fragments and Queries") { try pipeline.resolve(validated: validated) }

        let autoGeneratedFile = Console.perform(title: "‚úèÔ∏è  Generating Swift Code") { try resolved.generate(using: apollo)}
        Console.perform(title: "üíæ Saving Autogenerated Code") {
            try project.writeFile(name: "Graphaello.swift", content: autoGeneratedFile)
        }
        Console.print("\(.green)‚úÖ Done\(.reset)")
    }
}

extension Console {

    @discardableResult
    static func perform<T>(title: String, value: () throws -> T) -> T {
        return perform(title: title, subtitle: { _ in "Done" }, value: value)
    }

    @discardableResult
    static func perform<T>(title: String,
                           subtitle: (T) -> String,
                           value: () throws -> T) -> T {

        Console.print("\(.green)\(title)\(.reset): ...")
        let finalValue: T
        do {
           finalValue = try value()
        } catch {
            Console.write(.up(steps: 1))
            Console.clearLine()
            Console.print("")
            Console.printError("\(.redBackground)\(.white) \(title): Error! \(.reset)")
            Console.printError("")
            let errorString = "\(error)"
            Console.printError("\(errorString)")
            Console.write(.down(steps: 1))
            exit(-1)
        }
        Console.write(.up(steps: 1))
        Console.clearLine()
        Console.print("\(.green)\(title)\(.reset): \(subtitle(finalValue))")
        Console.write(.down(steps: 1))
        return finalValue
    }

}
