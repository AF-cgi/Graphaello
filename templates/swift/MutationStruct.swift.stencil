extension {{ structPrepared.name }} {
    class {{ mutationStruct.mutation.name }}{% if mutationStruct.mutation.referencedFragment %}<V: Fragment>{% endif %}: Mutation{% if mutationStruct.mutation.referencedFragment %} where V.UnderlyingType == {{ swiftType }}{% endif %} {

        {% if mutationStruct.mutation.referencedFragment %}
        typealias Value = V
        {% else %}
        typealias Value = {{ swiftType }}
        {% endif %}
        
        @Published private var _isLoading = false
        @Published private var _error: Error? = nil
        @Published private var _value: Value? = .none

        private let api: {{ mutationStruct.mutation.api.name }}
        
        var isLoading: AnyPublisher<Bool, Never> {
            return $_isLoading.eraseToAnyPublisher()
        }
        
        var value: AnyPublisher<Value, Never> {
            return $_value.compactMap { $0 }.eraseToAnyPublisher()
        }
        
        var error: AnyPublisher<Error, Never> {
            return $_error.compactMap { $0 }.eraseToAnyPublisher()
        }
        
        init(api: {{ mutationStruct.mutation.api.name }}) {
            self.api = api
        }
    }
}

{% if mutationStruct.mutation.referencedFragment %}
extension {{ structPrepared.name }}.{{ mutationStruct.mutation.name }} where V == Apollo{{ mutationStruct.mutation.api.name }}. {
{% else %}
extension {{ structPrepared.name }}.{{ mutationStruct.mutation.name }} {
{% endif %}

    @discardableResult
    func commit({{ queryRendererArguments|codeArray|join:", " }}) -> Self {
        _isLoading = true
        api.client.perform(mutation: Apollo{{ mutationStruct.mutation.api.name }}.{{ mutationStruct.mutation.name }}Mutation({{ queryArgumentAssignments|codeArray|join:", " }})) { result in
            self._isLoading = false
            switch result {
            case let .success(response):
                guard let data = response.data else { return }
                self._value = {{ expression }}
            case let .failure(error):
                self._error = error
            }
        }
        return self
    }

}
