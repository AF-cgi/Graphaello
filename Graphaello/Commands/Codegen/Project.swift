//
//  Project.swift
//  GraphQLCLI
//
//  Created by Mathias Quintero on 12/5/19.
//  Copyright Â© 2019 Mathias Quintero. All rights reserved.
//

import Foundation
import PathKit
import CLIKit
import XcodeProj

struct Project {
    private let path: CLIKit.Path
    private let xcodeProject: XcodeProj
    private let sourcesPath: PathKit.Path

    init(path: CLIKit.Path) throws {
        self.path = path
        xcodeProject = try XcodeProj(pathString: path.string)
        sourcesPath = .init(path.deletingLastComponent.string)
    }
}

extension Project {

    func files() throws -> [PathKit.Path] {
        return try xcodeProject
            .pbxproj
            .buildFiles
            .compactMap { try $0.file?.fullPath(sourceRoot: sourcesPath) }
    }

}

extension Project {

    private func save() throws {
        try xcodeProject.write(path: PathKit.Path(self.path.string))
    }

}

extension Project {

    func writeFile(name: String, content: String) throws {
        guard let data = content.data(using: .utf8) else { return }
        let file = try path(for: name)
        try data.write(to: file.url)
    }

    private func path(for file: String) throws -> PathKit.Path {
        return try files()
            .first { $0.lastComponent == file } ?? create(file: file)
    }

    private func create(file: String) throws -> PathKit.Path {
        guard let group = try xcodeProject.pbxproj.rootProject()?.mainGroup,
            let mainPath = try group.fullPath(sourceRoot: sourcesPath) else { fatalError() }

        let path = mainPath + file
        try path.write("// here goes an autogenerated file")
        let file = try group.addFile(at: path, sourceRoot: sourcesPath)
        try xcodeProject.pbxproj.sourcesBuildPhases.forEach { buildPhase in
            _ = try buildPhase.add(file: file)
        }
        try save()
        return path
    }

}
