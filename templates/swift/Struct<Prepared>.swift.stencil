// MARK: - {{ structPrepared.name }}

#if {{ unifiedMacroFlag }}
{% for fragment in fragments %}
extension Apollo{{ fragment.api.name }}.{{ fragment.name|upperCamelized }} : Fragment {
    typealias UnderlyingType = {{ fragment.api.name }}.{{ fragment.target.name|upperCamelized }}
}
{% endfor %}

extension {{ structPrepared.name }} {
    {% for fragment in fragments %}
    typealias {{ fragment.target.name|upperCamelized }} = Apollo{{ fragment.api.name }}.{{ fragment.name|upperCamelized }}
    {% endfor %}
    {% if query %}
    typealias Data = Apollo{{ query.api.name }}.{{ structPrepared.name }}Query.Data
    {% endif %}
    
    init({{ initializerArguments|codeArray|join:", " }}) {
        self.init({{ initializerValueAssignments|codeArray|join:", " }})
    }
}
{% if singleFragment %}
extension {{ structPrepared.name }} : Fragment {
    typealias UnderlyingType = {{ singleFragment.api.name }}.{{ singleFragment.target.name|upperCamelized }}
}

extension Apollo{{ singleFragment.api.name }}.{{ singleFragment.name|upperCamelized }} {
    
    func referencedSingleFragmentStruct() -> {{ structPrepared.name }} {
        return {{ structPrepared.name }}({{ singleFragment.target.name|camelized }}: self)
    }
    
}
{% endif %}

{% if query %}
extension {{ query.api.name }} {
    
    {% if isSwiftUIView %}
    func {{ functionName }}({{ queryRendererArguments|codeArray|join:", " }}) -> some View {
        return QueryRenderer(client: client,
                             query: Apollo{{ query.api.name }}.{{ structPrepared.name }}Query({{ queryArgumentAssignments|codeArray|join:", " }})) { (data: Apollo{{ query.api.name }}.{{ structPrepared.name }}Query.Data) -> {{ structPrepared.name }} in
        
            {{ structPrepared.name }}({{ initializerArgumentAssignmentFromQueryData|codeArray|join:", " }})
        }
    }
    {% else %}
    func {{ functionName }}({{ queryRendererArguments|codeArray|join:", " }}{% if queryRendererArguments %}, {% endif %}completion: @escaping (Result<{{ structPrepared.name }}, GraphQLLoadingError<{{ query.api.name }}>>) -> Void) {
        let query = Apollo{{ query.api.name }}.{{ structPrepared.name }}Query({{ queryArgumentAssignments|codeArray|join:", " }})
        fetch(query: query) { result in
            completion(result.map { data in {{ structPrepared.name }}({{ initializerArgumentAssignmentFromQueryData|codeArray|join:", " }}) })
        }
    }
    {% endif %}
    
}
{% endif %}

{{ mutationStructs|code }}
{{ missingFragmentsStructs|code }}
{{ missingReferencedFragments|code }}
#endif
